#!groovy

@Library('jenkinslibrary@master') _

//func from shareibrary
def build = new org.devops.build()
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()

def runOpts
//env
String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
String registry = "${env.registry}"

if ("${runOpts}" == "GitlabPush"){
    branchName = branch - "refs/heads/"
    
    currentBuild.description = "Trigger by ${userName} ${branch}"
    gitlab.ChangeCommitStatus(projectId,commitSha,"running")
    env.runOpts = "GitlabPush"

    
} else {
   println("-----手动触发构建-----");
}

//pipeline
pipeline{
    agent { node { label "build"}}
    
    // 指定运行的选项（可选）
    options {
        // 删除隐式checkout scm语句
        skipDefaultCheckout()
        //保持构建的最大个数
        buildDiscarder(logRotator(numToKeepStr: '5'))
        // 设置Pipeline运行的超时时间
        //timeout(time: 1, unit: 'HOURS')
        // 日志会有时间
        //timestamps()
        // 禁止并行
        //disableConcurrentBuilds()
    }
    
    // 参数化变量
    parameters {
    // 构建类型
    string(name:'buildType', defaultValue: 'mvn', description: '构建类型')
    // 构建命令
    string(name:'buildShell', defaultValue: 'clean install -DskipTests', description: '构建命令')
    // 镜像仓库
    choice choices: ['local', 'aliyun', 'huaweicloud'], description: '镜像仓库', name: 'registry'
    }

triggers{
    GenericTrigger(
        genericVariables: [
          [key: 'ref', value: '$.ref'],
          [key: 'projectId', value: '$.project.id'],
          [key: 'commitSha', value: '$.checkout_sha']
         ],
        causeString: 'Triggered on $ref',
        token: 'tms-pvbMXBbnxz',
        printContributedVariables: true,
        printPostContent: true,
        silentResponse: false,
        regexpFilterText: '$ref',
        regexpFilterExpression: '^refs/heads/master'
        //regexpFilterExpression: '^refs/heads/(master|devops)'
        //regexpFilterExpression: '^refs/heads/(features/sprint\\d*|master)$'
    )
}

    stages{

       stage("checkout") {
            steps {
                script{
                    tools.PrintMes("检出代码","green")
                    checkout scm
                }
            }
        }
        
        stage("Build"){
            steps{
                script{
                    tools.PrintMes("执行打包","green")
                    build.Build(buildType,buildShell)
                }
            }
        }

        // 构建镜像
        stage("BuildImages"){
            steps{
                script{
                    tools.PrintMes("构建上传镜像","green")
                sh """
                curl http://192.168.1.83/other/devops/raw/master/resources/org/foo/push_1of2.sh | sh -s ${registry}
                """
                }
            }
        }
        
        // gittag
            stage("gittag"){
                when {
                    branch 'master'
                }
                steps{
                    script{
                        tools.PrintMes("gittag","green")
                sh """
                curl http://192.168.1.83/other/devops/-/raw/master/resources/org/foo/git_tag_del.sh | sh
                echo ${BUILD_TIMESTAMP}
                git tag -a -m 'Release version ${BUILD_TIMESTAMP}' ${BUILD_TIMESTAMP}
                git push origin --tags
                echo 'git标签添加成功'
                """
                }
            }
        }
    }

    post {
        always{
            script{
                println("always")
            }
        }
        
        success{
            script{
                println("success")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"success")
                }            
            }
        
        }
        failure{
            script{
                println("failure")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
                }
            }
        }
        
        aborted{
            script{
                println("aborted")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
                }
            }
        
        }
    }

}
