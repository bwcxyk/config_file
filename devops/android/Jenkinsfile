#!groovy

@Library('jenkinslibrary@master') _

//func from shareibrary
def tools = new org.devops.tools()
def checkout = new org.devops.checkout()
def gradle = new org.devops.gradle()
def android = new org.devops.android()

//pipeline
pipeline{
    agent{
        kubernetes{
            defaultContainer 'node'
            inheritFrom 'jenkins-slave'
            yaml podYaml
            showRawYaml false
        }
    }

    // 指定运行的选项（可选）
    options {
        // 删除隐式checkout scm语句
        skipDefaultCheckout()
        //保持构建的最大个数
        buildDiscarder(logRotator(numToKeepStr: '5'))
        // 设置Pipeline运行的超时时间
        // timeout(time: 1, unit: 'HOURS')
        // 日志会有时间
        //timestamps()
        // 禁止并行
        disableConcurrentBuilds abortPrevious: true
    }

    // 参数化变量
    parameters {
    // 构建工具参数
    string(name: 'BUILD_ARGS', defaultValue: '', description: '可选的构建工具参数')
    }
    
    stages{

       stage("checkout") {
            steps {
                script{
                    tools.PrintMes("检出代码","green")
                    checkout.checkoutCustom()
                }
            }
        }

        stage("Build"){
            steps{
                container('gradle') {
                    script{
                        tools.PrintMes("执行打包","green")
                        gradle.build(params.BUILD_ARGS ?: '')
                    }
                }
            }
        }

        // jiagu
        stage("jiagu"){
            when {
                branch 'master'
            }
            steps{
                script{
                    tools.PrintMes("加固","green")
                sh """
                export IS_PUBLISH=prod
                sh jiagu.sh
                echo '加固完成'
                """
                }
            }
        }
        
        // 发布
        stage("Deploy"){
            steps{
                script{
                    tools.PrintMes("发布应用---Pgyer","green")
                    serviceName = "${JOB_NAME.split("_")[0]}"
                    sh "mv app/build/outputs/apk/debug/app-debug.apk ./${serviceName}.apk"

                    // android.UploadPgyer("${serviceName}.apk")
                    // 需要安装Pipeline Utility Steps插件使用readJSON
                    result = readJSON text: """${android.UploadPgyer("${serviceName}.apk")}"""
                    
                    imageUrl = result["data"]["appQRCodeURL"]
                    currentBuild.description = "<img src=${imageUrl}"
                }
            }
        }
    }
}
