#!groovy

@Library('jenkinslibrary@master') _

// func from shareibrary
def build = new org.devops.build()
def tools = new org.devops.tools()
def checkout = new org.devops.checkout()
// 读取资源文件
def podYaml = libraryResource 'com/yuanfu/pipeline/podyaml/GoPod.yaml'

// pipeline
pipeline{
    agent{
        kubernetes{
            defaultContainer 'go'
            inheritFrom 'jenkins-slave'
            yaml podYaml
            showRawYaml false
        }
    }

    environment {
        repo = "yuanfu-tms"
    }

    // 指定运行的选项（可选）
    options {
        // 删除隐式checkout scm语句
        skipDefaultCheckout()
        // 保持构建的最大个数
        buildDiscarder(logRotator(numToKeepStr: '5'))
        // 设置Pipeline运行的超时时间
        // timeout(time: 1, unit: 'HOURS')
        // 日志会有时间
        // timestamps()
        // 禁止并行
        // disableConcurrentBuilds abortPrevious: true
    }
    
    // 参数化变量
    parameters {
    // 构建命令
    string(name:'buildShell', defaultValue: 'go build', description: '构建命令')
    // 镜像仓库
    choice choices: ['local', 'aliyun', 'huaweicloud'], description: '镜像仓库', name: 'REGISTRY'
    }

    stages{
       stage("checkout") {
            steps {
                container('go'){
                    script{
                        tools.PrintMes("检出代码","green")
                        checkout.checkoutCustom()
                    }
                }
            }
        }

        stage("Build"){
            steps{
                container('go') {
                    script{
                        tools.PrintMes("执行打包","green")
                        def buildCmd = params.buildShell
                        sh "$buildCmd"
                    }
                }
            }
        }

        // 构建镜像
        stage("BuildImages"){
            steps{
                container('docker'){
                    script{
                        tools.PrintMes("构建镜像","green")
                        docker.docker()
                        docker.build(project: "test").push()
                    }
                }
            }
        }
        
    }

}
