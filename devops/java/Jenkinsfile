#!groovy

@Library('jenkinslibrary@master') _

// func from shareibrary
def tools = new org.devops.tools()
def checkout = new org.devops.checkout()
def maven = new org.devops.maven()
def docker = new org.devops.docker()

// 读取资源文件
def podYaml = libraryResource 'org/devops/pipeline/podyaml/MavenPod.yaml'

// pipeline
pipeline{
    agent{
        kubernetes{
            defaultContainer 'maven'
            inheritFrom 'jenkins-slave'
            yaml podYaml
            showRawYaml false
        }
    }

    environment {
        repo = "yuanfu-tms"
    }

    // 指定运行的选项（可选）
    options {
        // 删除隐式checkout scm语句
        skipDefaultCheckout()
        // 保持构建的最大个数
        buildDiscarder logRotator(artifactDaysToKeepStr: '1', artifactNumToKeepStr: '5', numToKeepStr: '5')
        // 设置Pipeline运行的超时时间
        // timeout(time: 1, unit: 'HOURS')
        // 日志会有时间
        // timestamps()
        // 禁止并行
        disableConcurrentBuilds()
    }
    
    // 参数化变量
    parameters {
    // 镜像仓库
    choice choices: ['local', 'aliyun', 'huaweicloud'], description: '镜像仓库', name: 'registry'
    }

    stages{

       stage("checkout") {
            steps {
                container('maven'){
                    script{
                        tools.PrintMes("检出代码","green")
                        checkout.checkoutCustom()
                    }
                }
            }
        }

        stage("Build"){
            steps{
                container('maven'){
                    script{
                        tools.PrintMes("执行打包","green")
                        maven.deploy()
                    }
                }
            }
        }

        // 构建镜像
        stage("BuildImages"){
            steps{
                container('docker'){
                    script{
                        tools.PrintMes("构建镜像","green")
                        docker.docker()
                        docker.build("wcpt-edi-wcpt-service").push()
                        docker.build("$WORKSPACE/wcpt-edi-dubbo-wcpt-service-impl", "wcpt-edi-wcpt-service").push()
                        docker.build("$WORKSPACE/wcpt-edi-api", "wcpt-edi-api").push()
                    }
                }
            }
        }

        // kaniko 构建镜像
        stage("KanikoBuildImages"){
            steps{
                container('kaniko'){
                    script{
                        tools.PrintMes("构建上传镜像","green")
                        sh """
                        /kaniko/executor \
                            --dockerfile=ddh-server/Dockerfile \
                            --context=dir://. \
                            --destination=192.168.1.60/library/demo:1.0
                        """
                    }
                }
            }
        }

    }

    post {
        success {
            archiveArtifacts artifacts: '**/build/libs/*.jar, **/build/libs/*.war', allowEmptyArchive: true
        }
        failure {
            echo '构建失败'
        }
    }

}
