#!groovy

@Library('jenkinslibrary@master') _

// func from shareibrary
def tools = new org.devops.tools()
def checkout = new org.devops.checkout()
def docker = new org.devops.docker()

// 读取资源文件
def podYaml = libraryResource 'org/devops/pipeline/podyaml/NodejsPod.yaml'

// pipeline
pipeline{
    agent{
        kubernetes{
            defaultContainer 'node'
            inheritFrom 'jenkins-slave'
            yaml podYaml
            showRawYaml false
        }
    }

    environment {
        repo = "yuanfu-tms"
    }

    // 指定运行的选项（可选）
    options {
        // 删除隐式checkout scm语句
        skipDefaultCheckout()
        // 保持构建的最大个数
        buildDiscarder(logRotator(numToKeepStr: '5'))
        // 设置Pipeline运行的超时时间
        // timeout(time: 1, unit: 'HOURS')
        // 日志会有时间
        // timestamps()
        // 禁止并行
        disableConcurrentBuilds()
    }
    
    // 参数化变量
    parameters {
    // 构建命令
    string(name:'buildShell', defaultValue: 'cnpm install && npm run build', description: '构建命令')
    // 镜像仓库
    choice choices: ['local', 'aliyun', 'huaweicloud'], description: '镜像仓库', name: 'registry'
    }

    stages{

       stage("checkout") {
            steps {
                container('node'){
                    script{
                        tools.PrintMes("检出代码","green")
                        checkout.checkoutCustom()
                    }
                }
            }
        }
        
        stage("Build"){
            steps{
                container('node'){
                    script{
                        tools.PrintMes("执行打包","green")
                        sh '''
                        sed -i "s|^axios.defaults.baseURL.*$|axios.defaults.baseURL = '###baseURL###'|g" $WORKSPACE/src/utils/http.js
                        '''
                        sh "${env.buildShell}"
                    }
                }
            }
        }

        // 构建镜像
        stage("BuildImages"){
            steps{
                container('docker'){
                    script{
                        tools.PrintMes("构建镜像","green")
                        docker.docker()
                        docker.build("node-tms").push()
                    }
                }
            }
        }
    }

}
